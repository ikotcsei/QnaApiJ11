<!--todo

    HTML . get,post,put,.. error codes amit elkezdtem tsl handshake - ig,

    this is a chatgpt link to an answer
    https:/chat.openai.com/?q=tell me the parts of browser rendering in details
    https:/chat.openai.com/?q=java io vs java nio
-->

<questionlist>

    <tetel>
        <question>
            DNS resolution in details
        </question>
        <answer>

            https:/chat.openai.com/?q=tell me the DNS resolution in details

            Summary of DNS Resolution Flow:

            User requests domain (e.g., www.example.com).
            Check browser and OS cache.
            Query recursive resolver if not cached.
            Resolver queries root DNS servers.
            Root server directs to TLD servers.
            TLD servers direct to authoritative servers.
            Authoritative servers return IP address or DNS record.
            Resolver caches and returns the IP to the user.

            Steps in DNS Resolution:

            User Request:
            When a user types a website's domain name (e.g., www.example.com) in their browser, the DNS resolution process
            begins to find the corresponding IP address for that domain.

            Browser Cache Check:
            The browser first checks if it has recently resolved the IP address for the domain and stored it in its local cache.
            If the address is found, it will be used immediately.
            If the IP address is not cached or the cache has expired, the request is sent to the operating system for further resolution.

            Operating System Cache Check:
            The operating system (OS) also has its own DNS cache. It checks whether it has previously resolved the IP address for the domain.
            If found, the address is returned to the browser, bypassing further steps in DNS resolution.

            DNS Resolver (Recursive Resolver):
            If the domain is not found in the browser or OS cache, the request is sent to a recursive DNS resolver,
            often provided by your Internet Service Provider (ISP) or a third-party DNS service like Google DNS or Cloudflare DNS.
            The resolver acts as an intermediary, responsible for performing the entire DNS lookup on behalf of the client.
            This resolver checks its cache to see if it has the IP address for the domain. If it doesn't,
            it starts querying other DNS servers to resolve the domain.

            Root Name Servers:
            If the recursive resolver doesn't know the IP address for the domain, it will send a request to one of the root name servers.
            These are the top-level DNS servers responsible for the overall DNS infrastructure.
            There are 13 sets of root name servers distributed globally, each identified by a letter (A, B, C, etc.).

            TLD (Top-Level Domain) Name Servers:
            The root name server doesn’t know the exact IP address for the domain but can direct the query to the TLD name servers.
            These servers are responsible for handling domains with specific extensions, like .com, .org, .net, or country-specific
            domains like .uk or .jp.
            For example, if you are searching for www.example.com, the root server will direct the query to the .com TLD name servers.

            Authoritative Name Servers:
            The TLD name servers will respond with a referral to the authoritative name servers for the domain in question.
            These are the DNS servers that actually hold the records for the domain.
            For example, example.com may have authoritative DNS servers that store the exact IP address of www.example.com.

            DNS Record Lookup:
            The recursive resolver then queries the authoritative DNS servers for the domain and requests the necessary record.
            The most common record types are:
            A Record: This provides the IPv4 address of the domain.
            AAAA Record: This provides the IPv6 address of the domain.
            CNAME Record: This provides an alias for a domain (e.g., www.example.com may be an alias for example.com).
            MX Record: This specifies mail exchange servers for the domain, indicating where email for that domain should be delivered.
            The authoritative server responds with the requested record, such as the IP address for the domain.

            Return to the Recursive Resolver:
            The authoritative server sends the IP address or other requested DNS record back to the recursive resolver.

            Returning the IP Address:
            The recursive resolver then returns the IP address to the user's computer or browser, which can now connect to the server hosting the website.

            Caching:
            The browser, operating system, recursive resolver, and authoritative servers will cache the DNS record for a certain period of time, known as the Time to Live (TTL). TTL is set by the authoritative DNS server and can range from a few seconds to days.
            This caching helps speed up future requests for the same domain, as it avoids the need to perform the entire DNS resolution process again.

            Types of DNS Records:

            A Record: Maps a domain to an IPv4 address (e.g., www.example.com -> 192.0.2.1).
            AAAA Record: Maps a domain to an IPv6 address (e.g., www.example.com -> 2001:0db8::1).
            CNAME Record: Alias for another domain (e.g., www.example.com -> example.com).
            MX Record: Specifies the mail servers for a domain (e.g., example.com uses mail.example.com).
            TXT Record: Holds text-based information, often used for security purposes like SPF (Sender Policy Framework) records.
            NS Record: Defines the authoritative DNS servers for a domain.
            PTR Record: Used for reverse DNS lookups, mapping an IP address back to a domain name.

            Caching in DNS:

            Caching reduces the load on DNS servers and speeds up the resolution process. The key elements of caching are:

            Browser Cache: Stores recent DNS queries for quicker access.
            Operating System Cache: Stores DNS records at the OS level to avoid querying external resolvers.
            Recursive Resolver Cache: Stores DNS records for domains that it has resolved recently.
            Authoritative Server Cache: Stores DNS records that it serves for a specific TTL.

            DNS Failures:

            DNS resolution can fail due to:

            DNS Server Failure: If the recursive resolver or authoritative DNS server is down or unreachable.
            Misconfigured DNS Records: If DNS records are incorrectly set up, domain names might not resolve to the correct IP addresses.
            Expired DNS Records: If the TTL of a cached record expires, it needs to be refreshed.
            DNS Spoofing (Cache Poisoning): Malicious attempts to introduce false DNS records in the cache of resolvers.


        </answer>
    </tetel>

    <tetel>
        <question>
            browser rendering in details
        </question>
        <answer>

            https:/chat.openai.com/?q=tell me the parts of browser rendering in details

            Loading the Page: DNS resolution and HTTP request/response.
            Parsing HTML: Building the DOM.
            Parsing CSS: Building the CSSOM.
            Constructing Render Tree: Combining DOM and CSSOM.
            Layout (Reflow): Calculating the position and size of elements.
            Painting: Drawing elements on the screen.
            Compositing: Layering elements together.
            JavaScript Execution: Modifying the DOM/CSSOM, adding interactivity.
            Reflow/Repaint: Recalculating layout/visuals if changes occur.
            Optimizations: Performance improvements and optimizations


            Loading the Page

            The rendering process begins when you enter a URL in the browser’s address bar, and the browser starts to load the webpage:

            DNS Resolution: The browser resolves the domain name (e.g., www.example.com) into an IP address using DNS
            (Domain Name System) so that it can connect to the correct web server.
            Sending the Request: The browser sends an HTTP/HTTPS request to the web server to fetch the page content.
            Receiving the Response: The web server responds with the requested HTML file (or other resources like images, CSS, JavaScript, etc.).

            2. Parsing HTML (HTML Parsing)

            Once the HTML document is received, the browser begins to parse it. Parsing means converting the raw HTML
            into a DOM (Document Object Model), which is a tree-like structure representing the content of the page:

            Tokenization: The HTML file is broken down into tokens (tags, attributes, and content).
            Tree Construction: These tokens are then used to build a tree structure that reflects the HTML document's hierarchy. Each node in the DOM tree represents an HTML element or content.

            3. CSS Parsing (CSS Parsing & Styles)

            Simultaneously, the browser parses the CSS files linked in the HTML or embedded within style tags.
            The browser builds a CSSOM (CSS Object Model), which is a tree structure representing the styles applied to elements:

            Parsing the CSS: The browser reads through the CSS files, understanding rules (selectors and declarations).
            CSSOM Construction: The CSSOM tree represents the styles for each element in the DOM. This is later used to
            compute the final visual layout of the page.

            4. Constructing the Render Tree

            Once the DOM and CSSOM are created, the browser needs to combine them into a render tree. The render tree is
            a tree structure that represents all the visual elements on the page. It consists of render objects,
            which correspond to visible elements on the page, and their styles.

            Merging DOM and CSSOM: The browser combines the information in the DOM and CSSOM to determine what each element looks
            like (i.e., its dimensions, position, colors, etc.).
            Invisible Elements: Elements like head, meta, or those with display: none are excluded from the render tree
            since they don't need to be painted.

            5. Layout (Reflow)

            Once the render tree is constructed, the browser calculates the layout of all visible elements. This step is also called reflow:

            Position and Size Calculation: The browser calculates the exact position and size of each element on the page
            (taking into account things like margins, padding, borders, and other style properties).
            Box Model: Each element’s size and position are determined based on the CSS box model (content, padding, border, and margin).

            6. Painting

            After the layout is determined, the browser proceeds to the painting step. This involves drawing the visual
            representation of elements on the screen.

            Painting Process: The render tree is traversed, and for each node, the browser calculates its visual
            appearance (e.g., text, images, background colors, borders, shadows).
            Layering: Some elements may be rendered on separate layers (for example, elements with CSS position: fixed or z-index).
            This allows for optimized rendering, such as hardware acceleration.

            7. Compositing

            Once the painting process is complete, the browser needs to compose the various layers and elements onto the screen:

            Layer Composition: The browser takes all the painted layers and arranges them in the correct order (taking
            into account z-index, stacking context, and other factors).
            Hardware Acceleration: In modern browsers, some parts of this process can be offloaded to the GPU (Graphics
            Processing Unit) for faster rendering, especially for animations and 3D transforms.

            8. JavaScript Execution

            JavaScript can be executed throughout the rendering process, but it often plays a key role at different stages:

            Parsing and Execution: JavaScript is usually parsed and executed after the HTML is loaded. This can modify
            the DOM or CSSOM, causing reflows or repaints. Scripts can be blocking or non-blocking depending on whether
            they are synchronous or asynchronous.
            Event Listeners: JavaScript can add interactivity to the page by attaching event listeners (e.g., for clicks, mouse movements, or key presses).

            9. Reflow and Repaint (Recalculation of Layouts)

            Whenever the DOM or CSSOM is modified (e.g., through JavaScript or user interactions like resizing the window),
            the browser may need to reflow (recalculate the layout) and repaint (recalculate the visual appearance):

            Reflow: If layout-related properties are changed (e.g., width, height, position), the browser needs to
            recalculate the positions and sizes of elements.
            Repaint: If a non-layout property changes (e.g., color, background), only the visual appearance needs to be recalculated.

            These recalculations can be costly in terms of performance, so modern browsers optimize these processes to minimize their impact.
            10. Rendering Optimizations and Performance Considerations

            Browsers use a variety of strategies to optimize the rendering process, including:

            Lazy Loading: Only loading resources like images or scripts when they are needed (e.g., when they appear in the viewport).
            Asynchronous Loading of Resources: Resources like JavaScript files can be loaded asynchronously
            (using async or defer attributes) to avoid blocking the rendering process.
            Hardware Acceleration: Offloading some tasks (like animations and certain layouts) to the GPU for smoother rendering.
        </answer>
    </tetel>

    <tetel>
        <question>
            eventloop
        </question>
        <answer>
            <links>https://iorilan.medium.com/do-you-know-event-loop-asked-by-my-interviewer-19d270a246c8</links>
        </answer>
    </tetel>

    <tetel>
        <question>
            java -async = NIO  non blocking arch /programming
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            bit manipulation - concetp
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            hashing
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            caching
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            realtime system
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            syncronous vs asyncronous
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            server side client side rendering
        </question>
        <answer>
            Server-side rendering is usually the choice for SEO-dependent websites with static content,
            while client-side rendering is used to render dynamic content and improve the user experience.

            Server-side pros:

            Search engines can crawl the site for better SEO.
            The initial page load is faster.
            Great for static sites.

            Server-side cons:

            Frequent server requests.
            An overall slow page rendering.
            Full page reloads.
            Non-rich site interactions.

            Client-side pros:

            Rich site interactions
            Fast website rendering after the initial load.
            Great for web applications.
            Robust selection of JavaScript libraries.

            Client-side cons:

            Low SEO if not implemented correctly.
            Initial load might require more time.
            In most cases, requires an external library
        </answer>
        <links>https://www.freecodecamp.org/news/server-side-rendering-javascript/</links>
    </tetel>

</questionlist>