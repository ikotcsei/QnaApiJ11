<!--toadd :
  effective java KONYV topikok

equals, hashCode, ....
   deepcopy shallow copy https://www.baeldung.com/java-deep-copy

   failfast, failsafe - collection iterator pl. documentationban
deepcpy shallow cpy
lazyload : if null , init else no init

methods common to all objects
SampleJavaExamples  strongweak ref
Integer a = 1000; Integer b = 1000; a==b true, ha a, b = 100 false. Integercacheing

-->

<questionlist>
    <tetel>
        <question>
            gyakori exceptionok
        </question>
        <answer>
            <links>https://rollbar.com/blog/most-common-java-exceptions/#</links><ln>common java exceptions</ln>
        </answer>
    </tetel>
    <tetel>
        <question>
            thread 1.0 what is, definition real basics
        </question>
        <answer>
            THREAD : thread of execution is the smallest sequence of programmed instructions that can be managed independently by a scheduler,
            which is typically a part of the operating system.[1] In many cases, a thread is a component of a process.

            - context switch : thread, process

            PROCESS :

            THREAD :

            ASYNCRONOUS  task: task ami futtathato fuggetlenul,parhuzamosan (new thread), nem blokkolja a main th-t.

            SYNC TASK :

            <links>https://en.wikipedia.org/wiki/Thread_(computing)#</links><ln>wiki trhreads</ln>
            <links>https://en.wikipedia.org/wiki/Thread_(computing)#/media/File:Concepts-_Program_vs._Process_vs._Thread.jpg</links><ln>wiki threads pic</ln>
            <links>https://www.tutorialspoint.com/difference-between-thread-context-switch-and-process-context-switch</links><ln>tutorialspot threads </ln>
        </answer>
    </tetel>
    <tetel>
        <question>
            real time applications
        </question>
        <answer>
            <links>https://www.codingninjas.com/studio/library/real-time-applications</links><ln>realtime apps 1.0</ln>
        </answer>
    </tetel>
    <tetel>
        <question>
            java Stream api (stream, predicat, lambda, optional, supplier, consumer, function- func .interface)
        </question>
        <answer>
            usecases : data aggregation - have a loads of table data pl. and filter them out (???)
                      use streams to express data querys - pl collectionban keres√©s, szures
            darkside:
            sunnyside:
        </answer>
        <links>https://www.oracle.com/technical-resources/articles/java/ma14-java-se-8-streams.html</links><ln>oracle on streams</ln>
    </tetel>
    <tetel>
        <question>
            javabasic test
        </question>
        <answer>
            javabasic test
        </answer>
    </tetel>
    <tetel>
        <question>
            authentication n authorization
        </question>
        <answer>
            <links>https://iorilan.medium.com/all-you-need-to-know-about-login-sso-ldap-saml-oauth-openid-i-was-recently-asked-this-question-aea8ae47ce2b</links>
            <ln>auth n autho full list</ln>
        </answer>
    </tetel>
    <tetel>
        <question>
            hashing, hashcode, equals
        </question>
        <answer>
            - basic : hashing in java,  hashmap ,hashset hash table, how are they implemented, ordos
            - object : hashCode() - jvm dependant, based on memoryaddresses
            - hashCode contract : during exec app hashcode same, eq => same hc ( vissza nem )
            - bucket :  index (K) = hashcode(K) mod (n-1)
            - node(K,V) : int hashcode, K key, V value, Node(K,V) next pointer.
            - map.put(K,V) : hash code collision : ua final hash value, ugyanabba a bucketbe kerulnek.
              ekkor check equals(): key es value Y: replace N:connect object to the existing one

            - rehashing : loadfactor 0.75 : ha 75%ot eleri a bucketek telitettsege noveli a tarmeretet

            -double hashing : instead of insert rehashing with a diff function / modified function

            - weak hashmap
            <links>https://hn.algolia.com/?q=hashing</links>
            <links>http://staff.ustc.edu.cn/~csli/graduate/algorithms/book6/chap12.htm</links>
            <links>https://hn.algolia.com/?q=hashing</links>
            <links>https://akshatm.svbtle.com/consistent-hash-rings-theory-and-implementation</links>
            <links>https://www.baeldung.com/java-weakhashmap</links>
        </answer>
    </tetel>
    <tetel>
        <question>
            OOP concepts
        </question>
        <answer>
            answer
        </answer>
    </tetel>
    <tetel>
        <question>
            java concenpts
        </question>
        <answer>
            equals, hashCode
            deepcopy - fully independent copy of the object
            shallow copy - pass a pointer, modification will address the old object also

            failfast - abort as soon as possible
                     - java iterator : ConcurrentModificationException if the underlying collection is
                       structurally modified while iterating
            failsafe - system dont abort on failure , create a clone and iterate on it.
                     - nem tudja garantalni h amit iteral az "naprakesz" = weakly guarantee
            lazyload : if null , init else no init

            methods common to all objects (toString, hashCode, equals, getClass, clone, wait, notify, )

            SampleJavaExamples  strongweak ref
            Integer a = 1000; Integer b = 1000; a==b true, ha a, b = 100 false. Integercacheing

            <links>https://www.baeldung.com/java-deep-copy</links>
            <links>https://programming.vip/docs/the-magic-of-strong-and-weak-references-in-java.html</links><ln>strong n weak references</ln>
        </answer>
    </tetel>
    <tetel>
        <question>
            java n memory
        </question>
        <answer>
            valamike
            <links>https://medium.com/nerd-for-tech/java-memory-explained-43de6de157be</links><ln>medium javamem</ln>
            <links>https://programming.vip/docs/the-magic-of-strong-and-weak-references-in-java.html</links><ln>strong n weak references</ln>
            <links>https://deepu.tech/memory-management-in-jvm/</links>
            <links>https://iorilan.medium.com/what-exactly-happens-when-you-new-an-object-ea38d9740617</links><ln>when new() an obj</ln>
            <links>https://jenkov.com/tutorials/java-concurrency/java-memory-model.html#java-memory-model-tutorial-video</links><ln>jenkov mem</ln>
            <images>http://192.168.0.153:8080/javabasic/j_mem1.jpg</images>
            <images>http://192.168.0.153:8080/javabasic/j_mem2.jpg</images>
            <images>http://192.168.0.153:8080/javabasic/JVM_architecture.jpg</images>
        </answer>
    </tetel>
</questionlist>