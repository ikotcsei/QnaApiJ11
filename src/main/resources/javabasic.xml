<!--toadd :
  event loop

  effective java KONYV topikok

-->

<questionlist>
    <tetel>
        <question>
            minta
        </question>
        <answer>
            minta
        </answer>
        <links>https://www.baeldung.com/java-deep-copy</links>
        <links>https://programming.vip/docs/the-magic-of-strong-and-weak-references-in-java.html</links><ln>strong n weak references</ln>
    </tetel>
    <tetel>
        <question>
            JVM reszei
        </question>
        <answer>
            asdf
        </answer>
    </tetel>
    <tetel>
        <question>
            thread 2.0 patterns , use cases
        </question>
        <answer>
            - executor service : UC : processing independent tasks, pl : transactions, req:one thread per task
            - nonblocking code
            - shared obj, reads and writes, locking - a shared file that has 100x read, 1xwrite
            - transactions
            - thread patterns : ...
        </answer>
        <links>https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html</links><ln>oracle concurrency doc</ln>
        <links>https://medium.com/ing-blog/how-does-non-blocking-io-work-under-the-hood-6299d2953c74</links><ln>non blocking IO medium</ln>
        <links>https://www.linkedin.com/pulse/java-sockets-io-blocking-non-blocking-asynchronous-aliaksandr-liakh/</links>IO - NIO - async - sync<ln></ln>
        <links>https://www.linkedin.com/pulse/unraveling-nodejs-understanding-non-blocking-io-event-sutradhar/</links><ln>event loop linkedin</ln>
        <links>https://inside.caratlane.com/demystifying-the-event-loop-in-node-js-unleashing-the-power-of-asynchronous-programming-91cec8ce2b5e</links><ln>eventloop good pic</ln>
    </tetel>
    <tetel>
        <question>
            type inference
        </question>
        <answer>
            type inference - var, generics, function parameter
            var a = 3; // inferred to integer
            var b = 1.0; // inferred to double

            Object type = a;
            type.getClass();

            int[] a = {1,23};
            Object tombtar3 = a;

            casting an ojbect to MyClass with classliteral:
            Myclass.class.cast("cast this obj to  string");
            Myclass.class.isInstanceof(intvariable) evk object instanceOf, de lehet primitive tipus is, instanceof nem

            1,
            - diamond operator
            Predicate*String* nameValidation = (String x) -> x.length() > 0;
            Predicate*String* nameValidation = x -> x.length() > 0;
            -local var inference : var a = 3;

            - argument inference
            public static *U* void addBox(U u,java.util.List*Box*U** boxes) { ...
                full call:
            BoxDemo.*Integer*addBox(Integer.valueOf(10), listOfIntegerBoxes);
                integer is inferred so :
            BoxDemo.addBox(Integer.valueOf(20), listOfIntegerBoxes);




        </answer>
        <links>https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html</links><ln>generic typeinf</ln>
        <links>https://developer.oracle.com/learn/technical-articles/jdk-10-local-variable-type-inference</links><ln>locvar typeinf</ln>
    </tetel>
    <tetel>
        <question>
            java lamda expressions
        </question>
        <answer>
            functional interface : one abs func (ekv) lambda expression (ekv) method reference
            interface MyFirst{   void func(String s); }
            interface Empty{   void emptyfunc(); }
            MyFirst myF = System.out::println;
            MyFirst myF = Classname::functionname;
            MyFirst myF = (s) -> {  System.out.println(s) };
            Empty myE = () -> {};
            Empty myE = () -> {System.out.println("asdf")};
            () -> { expr; }       LAMBDA EXPR
            System.out::println   METHOD REFERENCE


            expression : pl x + 1, new Object(), 1 + 1
            statement : double aValue = 8933.234;  // declaration statement, which is only one expression
            block : more statements

            System.out::println   METHOD REFERENCE
            () -> { expr; }       LAMBDA EXPR
            a -> 2*a ;
            (int a) -> 2*a;
            () -> { statements;  }

            1, you define or use a functional interface
            2, create lambda expr

            usecases ? : streams,
        </answer>
        <links>https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-LambdaExpression</links><ln>oracle lambda examples</ln>
        <links>https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-Expression</links><ln>oracle expressions</ln>
        <links>https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html</links><ln>oracle lambda tutorial</ln>
        <links>https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#use-case</links><ln>lambda expr usecase</ln>
        <links>https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/function/package-summary.html</links><ln>predefined functional interfaces</ln>
    </tetel>
    <tetel>
        <question>
            gyakori exceptionok - exception, error, checked / unchecked
        </question>
        <answer>
            classhierarch :
            throwable - ERROR - unchecked : cannot recover, JVM error, LinkageError
            throwable - EXCEPTION - RuntimeException - Unchecked : ClassCast, Arithmetic, NullPointer, File not found....
                                  - IOException - Checked : FileIO, networkIO, ...
        </answer>
        <links>https://www.geeksforgeeks.org/exceptions-in-java/</links><ln>java exceptions hierarchy</ln>
        <links>https://rollbar.com/blog/most-common-java-exceptions/#</links><ln>common java exceptions</ln>
        <links>https://res.cloudinary.com/practicaldev/image/fetch/s--UXYAie4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3vz8kaml2qskir1o8uc.png</links><ln>exceptions cheatsheet</ln>
    </tetel>
    <tetel>
        <question>
            thread 1.0 what is, definition real basics
        </question>
        <answer>

            PROCESS : program loaded to mem by OS, assigned heap and under execution. its active.

            THREAD : is a segment or part of a process that executes some task, sequence of instructions, can run concurrently
                process can have multiple threads running concurrently(conc. = the processor can switch execution resources
            between threads, resulting in concurrent execution)
            is the smallest sequence of programmed instructions that can be managed independently by a scheduler,
            which is typically a part of the operating system.[1] In many cases, a thread is a component of a process.

            ASYNCRONOUS  task:(non-blocking task) task ami futtathato fuggetlenul, parhuzamosan (new thread), nem blokkolja a main th-t.

            SYNC TASK : ami nem async, blocking task

            CONTEXT SWITCH : thread, process - store the state so it can be restored - threadstack, registers,

            executorservice: workers, assign tasks
                ExecutorService executorService =
                new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS,
                new LinkedBlockingQueue*Runnable*());

            java Future : A Future represents the result of an asynchronous computation.
                         (get, isDone, cancel, isCancelled ...)


        </answer>
        <links>https://en.wikipedia.org/wiki/Thread_(computing)#</links><ln>wiki trhreads</ln>
        <links>https://en.wikipedia.org/wiki/Thread_(computing)#/media/File:Concepts-_Program_vs._Process_vs._Thread.jpg</links><ln>wiki threads pic</ln>
        <links>https://www.tutorialspoint.com/difference-between-thread-context-switch-and-process-context-switch</links><ln>tutorialspot threads </ln>
        <links>https://www.baeldung.com/java-executor-service-tutorial</links><ln>baeldung executor service</ln>
        <links>https://docs.oracle.com/cd/E19253-01/816-5137/mtintro-25092/index.html</links><ln>oracle threads 1.0</ln>
        <links>https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html</links><ln>javadoc executorservice</ln>
        <links>https://medium.com/geekculture/concurrency-in-java-executor-service-part-1-918b5db79c72</links><ln>medium ex.serv.overview</ln>

    </tetel>
    <tetel>
        <question>
            real time applications
        </question>
        <answer>
        </answer>
        <links>https://www.codingninjas.com/studio/library/real-time-applications</links><ln>realtime apps 1.0</ln>
    </tetel>
    <tetel>
        <question>
            java Stream api (stream, predicat, lambda, optional, supplier, consumer, function- func .interface)
        </question>
        <answer>

            usecases : data aggregation - have a loads of table data pl. and filter them out (???)
                      use streams to express data querys - pl collectionban keres√©s, szures
            darkside:
            sunnyside:

            java.util.function osztalyozasa : function, primitive function, supplier, consumer, predicate
        </answer>
        <links>https://www.oracle.com/technical-resources/articles/java/ma14-java-se-8-streams.html</links><ln>oracle on streams</ln>
        <links>https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html</links><ln>func interfaces, java.util.function</ln>
    </tetel>
    <tetel>
        <question>
            authentication n authorization
        </question>
        <answer>
            valami
        </answer>
        <links>https://iorilan.medium.com/all-you-need-to-know-about-login-sso-ldap-saml-oauth-openid-i-was-recently-asked-this-question-aea8ae47ce2b</links>
        <ln>auth n autho full list</ln>
    </tetel>
    <tetel>
        <question>
            hashing, hashcode, equals
        </question>
        <answer>
            - basic : hashing in java,  hashmap ,hashset hash table, how are they implemented, ordos
            - object : hashCode() - jvm dependant, based on memoryaddresses
            - hashCode contract : during exec app hashcode same, eq => same hc ( vissza nem )
            - bucket :  index (K) = hashcode(K) mod (n-1), ahol hashcode(K) hashing function
            - node(K,V) : int hashcode, K key, V value, Node(K,V) next pointer.
            - map.put(K,V) : hash code collision : index(K) megegyezik(=ugyanabba a bucketbe kerulnek).
              ekkor check equals(): key es value Y: replace N:connect object to the existing one

            - rehashing : loadfactor 0.75 : ha 75%ot eleri a bucketek telitettsege noveli a tarmeretet

            - hashmap, hashtable, treemap, linkedhashmap

            - double hashing : instead of insert rehashing with a diff function / modified function

            - weak hashmap : keys are weak references, garbage collected eagerly - memory effective

            - hash spec tipusok :
                Consistent hashing :
        </answer>
        <links>https://hn.algolia.com/?q=hashing</links>
        <links>http://staff.ustc.edu.cn/~csli/graduate/algorithms/book6/chap12.htm</links>
        <links>https://hn.algolia.com/?q=hashing</links>
        <links>https://akshatm.svbtle.com/consistent-hash-rings-theory-and-implementation</links>
        <links>https://www.baeldung.com/java-weakhashmap</links>
        <links>https://www.geeksforgeeks.org/consistent-hashing/</links><ln>GFG consistent hashing</ln>
    </tetel>
    <tetel>
        <question>
            java concenpts
        </question>
        <answer>
            equals, hashCode
            deepcopy - fully independent copy of the object
            shallow copy - pass a pointer, modification will address the old object also

            failfast - abort as soon as possible
                     - java iterator : ConcurrentModificationException if the underlying collection is
                       structurally modified while iterating
            failsafe - system dont abort on failure , create a clone and iterate on it.
                     - nem tudja garantalni h amit iteral az "naprakesz" = weakly guarantee
            lazyload : if null , init else no init

            methods common to all objects (toString, hashCode, equals, getClass, clone, wait, notify, )

            SampleJavaExamples  strongweak ref
            Integer a = 1000; Integer b = 1000; a==b true, ha a, b = 100 false. Integercacheing

        </answer>
        <links>https://www.baeldung.com/java-deep-copy</links>
        <links>https://programming.vip/docs/the-magic-of-strong-and-weak-references-in-java.html</links><ln>strong n weak references</ln>
    </tetel>
    <tetel>
        <question>
            java n memory, references
        </question>
        <answer>
            reference : pass by value,
            primitive wrappers are immutable. Integer  : i = i + 1;  - unwrap i, add one, wrap it to another object.
                                                    i = 77;  - also creates a new integer object
                        - can be used as keys in hashmap,


            GCroot -> live -> live; dead; dead;
            GCroots : active java threads; local vars and params of curr. ex. method; static variables; JNI references
            generational garbage collection : young, old, permanent

            GC basic working : minorgc, majorgc,marknsweep(first round mark, secound delete), GC cycle




            String  :
            valamike
        </answer>
        <links>https://www.freecodecamp.org/news/garbage-collection-in-java-what-is-gc-and-how-it-works-in-the-jvm/</links><ln>java garbage collection</ln>
        <links>https://www.dynatrace.com/resources/ebooks/javabook/how-garbage-collection-works/</links><ln>dyna gc roots</ln>
        <links>https://medium.com/nerd-for-tech/java-memory-explained-43de6de157be</links><ln>medium javamem</ln>
        <links>https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/considerations.html</links><ln>oracle doc reference types</ln>
        <links>https://programming.vip/docs/the-magic-of-strong-and-weak-references-in-java.html</links><ln>strong n weak references</ln>
        <links>https://deepu.tech/memory-management-in-jvm/</links>
        <links>https://gist.github.com/bossiernesto/ccb3a847e83ae0ddf7db0b0eae30870f#file-jvm-architecture-png</links><ln>JVM github</ln>
        <links>https://iorilan.medium.com/what-exactly-happens-when-you-new-an-object-ea38d9740617</links><ln>when new() an obj</ln>
        <links>https://jenkov.com/tutorials/java-concurrency/java-memory-model.html#java-memory-model-tutorial-video</links><ln>jenkov mem</ln>
        <images>http://ezittegybukfenc.de:8080/QA/javabasic/j_mem1.jpg</images>
        <images>http://ezittegybukfenc.de:8080/QA/javabasic/j_mem2.jpg</images>
        <images>http://ezittegybukfenc.de:8080/QA/javabasic/JVM_architecture.jpg</images>
    </tetel>
</questionlist>