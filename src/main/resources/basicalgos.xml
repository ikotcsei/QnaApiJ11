<!--basic algos and DS -->
<!--muveletigen,  bestcase,worst case, average case
    memoriahasznalat,
    peldak : mire hol hasznaljak, javaban mi hogy van megvalositva
    -->
<questionlist>
    <tetel>
        <question>
            quicksort - muveletigeny(best,worst,avg), mem. hasznalat
            mikor hol, javaban hogy implementalva
        </question>
        <answer>
            time complex : n * logn
            space complex ( total amount of memory ): helyben rendez

            invarians i -re : i. elemig m√°r jo, kisebb mint pivot, (i + 1) lehet kisebb is nagyobb is mint pivot


            int partition(int arr[],int low,int high)
            {
                int pivot=arr[high];
                int i=(low-1);

                for(int j=low;j less or eq. high;j++)
                {
                    if(arr[j] less pivot)
                    {
                        i++;
                        swap(arr[i],arr[j]);
                    }
                }
                swap(arr[i+1],arr[high]);
                return (i+1);
            }

        </answer>
        <links>https://www.geeksforgeeks.org/quick-sort/</links>
    </tetel>
    <tetel>
        <question>
            mergesort - muveletigeny(best,worst,avg), mem. hasznalat
            mikor hol, javaban hogy implementalva
        </question>
        <answer>

        </answer>
    </tetel>
    <tetel>
        <question>
            binarysearch - array, in the java mem. model
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            bin tree - create, insert, search, save, load, copy
            traversal : pre, in, post
        </question>
        <answer>
            save : inorder,preorder, array - bintree
            load/build : array , in + post, pre + post, in + pre
        </answer>
    </tetel>
    <tetel>
        <question>
            bintree - szelessegi kereses , melysegi kereses
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            heap
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            tries
        </question>
        <links>https://en.wikipedia.org/wiki/Trie</links>
        <answer>
            valami valasz
        </answer>
    </tetel>
    <tetel>
        <question>
            binary search tree
        </question>
        <links>https://www.geeksforgeeks.org/binary-search-tree-data-structure/</links>
        <answer>

        </answer>
    </tetel>

    <tetel>
        <question>
            AVL tree
        </question>
        <links>https://en.wikipedia.org/wiki/AVL_tree</links>
        <answer>
            forgatasok : rotate_left, rotate_right, rotate_left_right, rotate_right_left

            muvetek : insert logN, delete logN

            After this insertion, if a tree becomes unbalanced, only ancestors of the newly inserted node are
            unbalanced. This is because only those nodes have their sub-trees altered.[13] So it is necessary
            to check each of the node's ancestors for consistency with the invariants of AVL trees: this is called
            "retracing". This is achieved by considering the balance factor of each node.

        </answer>
    </tetel>
    <tetel>
        <question>
            N-ary tree
        </question>
        <links>https://www.geeksforgeeks.org/generic-treesn-array-trees/</links>
        <answer>

        </answer>
    </tetel>
    <tetel>
        <question>
            basic data structures - how it is implemented in java
             pqueue, vector/arrayList
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            basic data structures - how is implemented in java
            stack, queue,  hashtable
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            dijkstra
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            graf - szelessegi, melysegi bejaras
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            O(N), memoriaigeny
            peldak
        </question>
        <answer>
            O : 1, logn, n, n*logn, n2, 2^n, n!
        </answer>
    </tetel>
    <tetel>
        <question>
            graf - szinezes
        </question>
        <answer>
            negyszin tetel
        </answer>
    </tetel>
</questionlist>