<!--
    react : add jegyzet fenykep stb
     sharding - tesznikak


    network tul: bandwidth, througput, latency
    server tul: bandwidth, ip, openports, ...

  later :
    architectures - event driven, message driven, microservice, monolith, distributed...
    concurrency : ......
-->

<questionlist>
    <tetel>
        <question>
            sys design tradeoffs
            Polling vs Long-Polling vs Webhooks
            CDN vs direct server
            serverless vs server based
            stateful vs stateless
            read heavy vs write heavy
            token bucket vs leaky bucket
        </question>
        <answer>0
            * polling : request fixed intervals pl. 5sec, client initiates requests
               + : easy   - : inefficient
                uc : task status update

              longpolling : server holds the request open until new data
                  is available to send back to the client. near real-teioei9
               + : efficient  - : coonection hold on server, more resource
                 uc : notification system

              webhooks :  client can accept http/ post req, server event -> send data to client
               + : realtime, efficient
               - : more complex, client inc malicious data
                 uc: ecommerence update invetory when a product is sold, payment processing
                     third party integration : sync data across tools slack, github, etc. on an event

            * traffic control : token bucket leaky bucket

        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b72ac93e7ae59a1b059</links><ln>DG webcrawler </ln>
    </tetel>
    <tetel>
        <question>
            sys design tradeoffs
            sql nosql
            primary replica vs peer to peer replica
            data compression vs deduplication
            server caching client caching
            REST vs RPC
        </question>
        <answer>
            * primary replica - master slave : master writes to slaves, slaves can be read to spread load evenly
              peer to peer : pl bittorrent fileshare, all nodes write and read
               + : decentral - no single point of filure, bottleneck, spreads
                    load evenly over the network
               - : more complex, data consistency, handleing data conflicts

            * data compression vs deduplication
        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/primaryreplica-vs-peertopeer-replication</links><ln>tradeoffs</ln>
    </tetel>
    <tetel>
        <question>
            sys design tradeoffs
            strong vs eventual consistency
            latency vs throughput
            ACID vs BASE properties
            ReadThroug vs WriteThrough cache
            BatchProcessing vs Stream Processing
        </question>
        <answer>
            * strong : ok, its done send to client when writing to db is done.
                    financial system
              eventual : ok, its done sent to client before writing to DB.
                        guarantees only that it will be written in the future
                    social media data feed

            * latency : measures delay, single request from start to finish.
                       low latency more responsive system

              throughput : amount of data transferred in a given time over a
                      network

            * ACID : atomicity , consistency, isolation, durability - banking pl.
              BASE : basic avail, soft state, eventuall consistency,
             BASE is better for large-scale applications needing high
             availability and scalability.

            * batch : process large amount in scheldued intervals. pl payroll process at
                a huge company. character : delayed processing, high throughput
                + : resource efficient, simple
                - : no realtime

             stream : continous realtime processing data, pl fraud detection when processing
                  bank card transaction data, if fraud immident response
                + : real time, dynamic response
                - : more complex, more resource intensive
        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/readthrough-vs-writethrough-cache</links><ln>read/write through cache</ln>
    </tetel>
    <tetel>
        <question>
            architectures - event driven
            pros, cons, solutions
        </question>
        <answer>

            In an event-driven architecture, system components communicate through the production
            and consumption of events. When a component performs an action that other components
            might be interested in, it publishes an event. Other components, known as event consumers,
            listen for these events and react accordingly. This decouples components, allowing
            for more scalable and resilient systems. EDA is particularly useful in applications
            requiring real-time processing and responsiveness.

            Kafka, RabbitMQ pl.
            - event generation, transmission, processing, and storage

        </answer>
    </tetel>
    <tetel>
        <question>
            architectures - message driven
            pros, cons, solutions
        </question>
        <answer>

            Message-driven architecture centers around the exchange of messages between
            components to enable communication and coordination. Unlike event-driven systems,
            where events represent a state change, messages in this context are explicit requests
            or commands directed from one component to another. This approach can be synchronous
            or asynchronous and is often used to integrate disparate systems or components,
            ensuring reliable communication and decoupling of services

        </answer>
    </tetel>
    <tetel>
        <question>
            FE - react useState,useEffect,await - async,function component,

        </question>
        <answer>
            props upndown,hooks : { useState, useEffect ...},await - async,
            function component, class component, context API,
            redux, routing
        </answer>
        <links>https://www.udemy.com/course/react-the-complete-guide-incl-redux/learn/lecture/39836800#overview</links><ln>http req fetch UD</ln>
        <links>https://www.udemy.com/course/react-the-complete-guide-incl-redux/learn/lecture/39836950#overview</links><ln>async await UD</ln>
    </tetel>
    <tetel>
        <question>
            client server rendering/routing
        </question>
        <answer>
            render : pl. run js code and generate html de nem csak ez , bongeszo engine is rendereli a html-t

            CLIENT SIDE
                routing : borwser url to react router , resolve. if not found, get to server ??
                render : download index.html, css, js, etc. files. render it together.

                usecase : large amount users, more dynamic

            SERVER SIDE
                routing : link resolving takes place on  the server, each link - http get
                          new html
                render : create html, bundle.js on server side, return to client
                usecase :
                    static website, webapp with less users, less interactivity
                    becase on reload the server has to rebuild the whole page and
                    send it to client




        </answer>
        <links>https://www.youtube.com/watch?v=mZEv4mHsU5E</links><ln>serversiderender with react router</ln>
        <images>http://ezittegybukfenc.de:8080/QA/sysdesign/SSRwithRR.jpg</images><ln>SSR with react router</ln>
    </tetel>
    <tetel>
        <question>
            fogalmak :scalability,reliability,availability,efficiency, service managebility
            single point of failure,bandtwith - networking : ping, lag, , uptime .....
            latency, throughput
        </question>
        <answer>
            bandwith : capacity measure, mekkora a cso atmeroje (width) amin folyik,
                        mpbs ?? ez througput csak fixed time  ? sztem sec
            latency : data speed, milyen gyorsan folyik a viz  , t0: req send, t1 resp arrive
                      latency = t1-t0 , sec
            throughput : how much water runnign throuhg the pipe
                         data transmitted / time period   , mbps
            reliability : he measure of the length of time infrastructure operates without disruption
                          vagy a vszinusege h a rendszer meghibasodik egy adott idoszakban
            availability : az az idoszak ami alatt a rendszer mukodokepes es teljesiti a feladatat
            scalability : the capability of a system to grow and manage increased demand
                          increased : data , amount of work, pl transactions,
                         vertical - horizontal scaleing

            service or managebility : how easy to maintain and operate
        </answer>
    </tetel>
    <tetel>
        <question>
            estimates( traffic : create=write, read, kbyte/sec; storage,TB ;
                       bandwith : write + read, kb/sec ; mem-caching : GB)
        </question>
        <answer>
            - tinyURL(r/w 100:1, 80:20 rule), pasteBin,
            - read / write heavy
            - bandwith
            - memory - caching 80:20rule
            - storage estimates . hd
            - data size estimation
            - soap vs rest api
        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b5dac93e7ae59a1af6b</links><ln>tiny URL estimates</ln>
        <links>https://github.com/systemdesign42/system-design?tab=readme-ov-file#system-design-fundamentals-1</links><ln>sysd42 backofenvelope</ln>
    </tetel>
    <tetel>
        <question>
            TinyUrl
        </question>
        <answer>
        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b5dac93e7ae59a1af6b</links><ln>DG tiny URL</ln>
    </tetel>
    <tetel>
        <question>
            Api Rate Limiter
        </question>
        <answer>
        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b70ac93e7ae59a1b025</links><ln>api rate limiter</ln>
    </tetel>

    <tetel>
        <question>
            Proxy, Reverse Proxy
        </question>
        <answer>

        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/645d5161fff33a24ccce4bb1</links><ln>proxy, reverse prox</ln>
    </tetel>

    <tetel>
        <question>
            LoadBalancing
                describe, types
        </question>
        <answer>
            distribute incoming load
            types : least connection, least response , least bandtwith, roundRobin, weightRR, ipHash
            - health checks
            - redundant load balancer - single point of failure, 2LB : both pinging each other, daemon;
                if ping fails : ip switching dynamically

            -what if more than 2 ? for leader election : zookeper, everyone tries to write a shared entry, who
             can that is the leader. deep topic.
        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/load-balancing</links><ln>DIO loadbalancere</ln>
        <links>https://lethain.com/introduction-to-architecting-systems-for-scale/</links><ln>good articles</ln>
        <links>https://www.vmware.com/topics/load-balancing</links><ln>LB artikül</ln>
    </tetel>

    <tetel>
        <question>
            Caching : where can we cache - layer, place, invalidation policies, eviction policies
        </question>
        <answer>
            UC:
            where : request layer node cache in : mem, hd, both
            where : processor layers also cache pl. - we can have them in each layer
            what when expanded on multiple nodes ? - > each node with own cache, or global cache or distributed cache
            CDN : cache that serves loads static data

            CACHE INVALIDATION : when the data is no more valid (pl modified in the database)
                - write strats (through, around, back) cache
                - cache INVALIDATION METHODS : purge, refresh, ban, ttl, stale while revalidate
                - read strats (through, aside )

            CACHE EVICTION: LRU, MRU , FIFO , LIFO, LFU- least freq. used

            server side caching
            client side caching
            readthrough cache vs write thru

        </answer>
        <images>http://ezittegybukfenc.de:8080/QA/caching.jpg</images>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/65a625996f7f6d0ab356273b</links><ln>dg serverside vs clientside cache</ln>
        <links>https://lethain.com/introduction-to-architecting-systems-for-scale/</links><ln>good articles</ln>
    </tetel>

    <tetel>
        <question>
           Partitioning (Sharding - horizontal partitioning)
                types, pros, cons
        </question>
        <answer>
            Problem : pl. database table first 100 rows are read 99% of the time. create a shard based on that, to
                achieve performance boost.
            Shard manager : creates, merges, resize shards etc. based on a database dynamicall (?),
            Partitioning : process of dividing a large DB into smaller more manageable
                parts called partitions or shards.

            UC:
            Methods  - horizontal, vertical, hibrid
            Partitioning crit : key/hash based, list, RR, composite

            dirbased :
            common problems :
        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b7aac93e7ae59a1b0c1</links><ln>DG data partitioning</ln>
        <images>http://ezittegybukfenc.de:8080/QA/dataPartition.jpg</images>
    </tetel>
    <tetel>
        <question>
            Design a Chat Service (like Facebook Messenger or WhatsApp)

            Considerations for real-time messaging and data synchronization across devices.
            Handling high volumes of messages and maintaining low latency.
        </question>
        <answer>
        </answer>
    </tetel>

<!--    <tetel>-->
<!--        <question>-->
<!--            Design a Mass Social Media Service (like Facebook, Twitter, or Instagram)-->

<!--            Strategies for handling large-scale data and user traffic.-->
<!--            Implementing features like news feeds, post interactions, and multimedia content.-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--    </tetel>-->

<!--    <tetel>-->
<!--        <question>-->
<!--            Design a Social Network and Message Board Service (like Quora, Reddit, or HackerNews)-->

<!--            Focusing on user-generated content, community engagement, and content moderation.-->
<!--            Ensuring scalability and efficient search functionality across numerous posts and threads-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--    </tetel>-->

<!--    <tetel>-->
<!--        <question>-->
<!--            Design a File Sharing Service (like Dropbox, Google Drive, or Google Photos)-->

<!--            Ensuring secure file storage, sharing, and synchronization across multiple devices.-->
<!--            Handling large file sizes and optimizing for fast upload/download speeds.-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--    </tetel>-->

<!--    <tetel>-->
<!--        <question>-->
<!--            Design a Video Sharing Service (like YouTube, Netflix)-->

<!--            Managing large-scale video storage and optimizing streaming services for different devices.-->
<!--            Implementing user recommendations, content search, and playback quality adjustments.-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--    </tetel>-->

<!--    <tetel>-->
<!--        <question>-->
<!--            Design a Proximity Service (like Yelp, Nearby Friends, Uber)-->

<!--            Integrating location-based services and real-time updates.-->
<!--            Balancing privacy concerns with functionality for services reliant on user location.-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--    </tetel>-->

<!--    <tetel>-->
<!--        <question>-->
<!--            Design a Search Engine Related Service (like Typeahead or WebCrawler)-->

<!--            Developing fast, predictive search capabilities for enhanced user experience.-->
<!--            Designing efficient web crawling and data indexing strategies for accurate search results.-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--    </tetel>-->

</questionlist>