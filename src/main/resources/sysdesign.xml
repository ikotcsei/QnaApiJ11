<!--sharding - tesznikak

-->

<questionlist>
    <tetel>
        <question>
            fogalmak :scalability,reliability,availability,efficiency, service ormanagebility
            single point of failure,bandtwith - networking : ping, lag, , uptime .....
            latency, throughput
        </question>
        <answer>
            bandwith : capacity measure, mekkora a cso atmeroje (width) amin folyik,
                        mpbs ??
            latency : data speed, milyen gyorsan folyik a viz  , t0: req send, t1 resp arrive
                      latency = t1-t0 , sec
            throughput : how much water runnign throuhg the pipe
                         data transmitted / time period   , mbps
            reliability : he measure of the length of time infrastructure operates without disruption
                          vagy a vszinusege h a rendszer meghibasodik egy adott idoszakban
            availability : az az idoszak ami alatt a rendszer mukodokepes es teljesiti a feladatat
            scalability : the capability of a system to grow and manage increased demand
                          increased : data , amount of work, pl transactions,
                         vertical - horizontal scaleing

            service or managebility : how easy to maintain and operate
        </answer>
        <links></links>
    </tetel>
    <tetel>
        <question>
            estimates
        </question>
        <answer>
            - read / write heavy
            - bandwith
            - memory - caching
            - storage estimates . hd
            - data size estimation
            - soap vs rest api
        </answer>
        <links></links>
    </tetel>
    <tetel>
        <question>
            webcrawler
        </question>
        <answer>
            adsf
        </answer>
        <links></links>
    </tetel>
    <tetel>
        <question>
            TinyUrl
        </question>
        <answer>
        </answer>
        <links>http://localhost:8080/dataPartition.jpg</links>
    </tetel>
    <tetel>
        <question>
            DropBox
        </question>
        <answer>
        </answer>
        <links>http://localhost:8080/dataPartition.jpg</links>
    </tetel>
    <tetel>
        <question>
            Api Rate Limiter
        </question>
        <answer>
        </answer>
        <links>http://localhost:8080/dataPartition.jpg</links>
    </tetel>

    <tetel>
        <question>
            Proxy, Reverse Proxy
        </question>
        <answer>

        </answer>
        <links>http://localhost:8080/proxy.jpg</links>
    </tetel>

    <tetel>
        <question>
            LoadBalancing
                describe, types
        </question>
        <answer>

            types : lest connection, least response , least bandtwith, roundRobin, weightRR, ipHash
            - health checks
            - redundant load balancer - single point of failure
        </answer>
        <links>http://localhost:8080/caching.jpg</links>
    </tetel>

    <tetel>
        <question>
            Cacheing : where can we, eviction policie, invalidation policies
        </question>
        <answer>
            UC:
            where : request layer node cache in : mem, hd, both
            what when expanded on multiple nodes ? - > each node with own cache, or global cache or distributed cache
            CDN : cache that serves loads static data

            cache invalidation : when the data is no more valid (pl modified in the database)
                - write (through, around, back) cache

            cache eviction: LRU, MRU , FIFO , LIFO, LFU- least freq. used

            server side caching
            client side caching
        </answer>
        <links>http://localhost:8080/caching.jpg</links>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/65a625996f7f6d0ab356273b</links><ln>dg serverside vs clientside chach</ln>
    </tetel>

    <tetel>
        <question>
           Partitioning
                types, pros, cons
        </question>
        <answer>
            UC:
            horizontal :
            vertical :
            dirbased :
            common problems :
        </answer>
        <links>http://localhost:8080/dataPartition.jpg</links>
    </tetel>
    <tetel>
        <question>
            Design a Chat Service (like Facebook Messenger or WhatsApp)

            Considerations for real-time messaging and data synchronization across devices.
            Handling high volumes of messages and maintaining low latency.
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            Design a Mass Social Media Service (like Facebook, Twitter, or Instagram)

            Strategies for handling large-scale data and user traffic.
            Implementing features like news feeds, post interactions, and multimedia content.
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            Design a Social Network and Message Board Service (like Quora, Reddit, or HackerNews)

            Focusing on user-generated content, community engagement, and content moderation.
            Ensuring scalability and efficient search functionality across numerous posts and threads
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            Design a File Sharing Service (like Dropbox, Google Drive, or Google Photos)

            Ensuring secure file storage, sharing, and synchronization across multiple devices.
            Handling large file sizes and optimizing for fast upload/download speeds.
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            Design a Video Sharing Service (like YouTube, Netflix)

            Managing large-scale video storage and optimizing streaming services for different devices.
            Implementing user recommendations, content search, and playback quality adjustments.
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            Design a Proximity Service (like Yelp, Nearby Friends, Uber)

            Integrating location-based services and real-time updates.
            Balancing privacy concerns with functionality for services reliant on user location.
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            Design a Search Engine Related Service (like Typeahead or WebCrawler)

            Developing fast, predictive search capabilities for enhanced user experience.
            Designing efficient web crawling and data indexing strategies for accurate search results.
        </question>
        <answer>
        </answer>
    </tetel>

</questionlist>