<!--sharding - tesznikak

    network tul: bandwidth, througput, latency
    server tul: bandwidth, ip, openports, ...

    architectures - event driven, message driven, microservice, monolith,...
    concurrency : ......
-->

<questionlist>
    <tetel>
        <question>
            microservices architecture(epitokovek)
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            architectures - event driven
        </question>
        <answer>
        </answer>
    </tetel>
    <tetel>
        <question>
            FE - react useState,useEffect,await - async,function component,

        </question>
        <answer>
            props upndown,hooks : { useState, useEffect ...},await - async,
            function component, class component, context API,
            redux, routing
        </answer>
        <links>https://www.udemy.com/course/react-the-complete-guide-incl-redux/learn/lecture/39836800#overview</links><ln>http req fetch UD</ln>
        <links>https://www.udemy.com/course/react-the-complete-guide-incl-redux/learn/lecture/39836950#overview</links><ln>async await UD</ln>
    </tetel>
    <tetel>
        <question>
            client server rendering/routing
        </question>
        <answer>
            render : pl. run js code and generate html de nem csak ez , bongeszo engine is rendereli a html-t

            CLIENT SIDE
                routing : borwser url to react router , resolve. if not found, get to server ??
                render : download index.html, css, js, etc. files. render it together.

                usecase : large amount users, more dynamic

            SERVER SIDE
                routing : link resolving takes place on  the server, each link - http get
                          new html
                render : create html, bundle.js on server side, return to client
                usecase :
                    static website, webapp with less users, less interactivity
                    becase on reload the server has to rebuild the whole page and
                    send it to client




        </answer>
        <links>https://www.youtube.com/watch?v=mZEv4mHsU5E</links><ln>serversiderender with react router</ln>
        <images>http://ezittegybukfenc.de:8080/QA/sysdesign/SSRwithRR.jpg</images><ln>SSR with react router</ln>
    </tetel>
    <tetel>
        <question>
            fogalmak :scalability,reliability,availability,efficiency, service rmanagebility
            single point of failure,bandtwith - networking : ping, lag, , uptime .....
            latency, throughput
        </question>
        <answer>
            bandwith : capacity measure, mekkora a cso atmeroje (width) amin folyik,
                        mpbs ?? ez througput csak fixed time  ? sztem sec
            latency : data speed, milyen gyorsan folyik a viz  , t0: req send, t1 resp arrive
                      latency = t1-t0 , sec
            throughput : how much water runnign throuhg the pipe
                         data transmitted / time period   , mbps
            reliability : he measure of the length of time infrastructure operates without disruption
                          vagy a vszinusege h a rendszer meghibasodik egy adott idoszakban
            availability : az az idoszak ami alatt a rendszer mukodokepes es teljesiti a feladatat
            scalability : the capability of a system to grow and manage increased demand
                          increased : data , amount of work, pl transactions,
                         vertical - horizontal scaleing

            service or managebility : how easy to maintain and operate
        </answer>
    </tetel>
    <tetel>
        <question>
            estimates( traffic : create=write, read, kbyte/sec; storage,TB ;
                       bandwith : write + read, kb/sec ; mem-caching : GB)
        </question>
        <answer>
            - tinyURL(r/w 100:1, 80:20 rule), pasteBin,
            - read / write heavy
            - bandwith
            - memory - caching 80:20rule
            - storage estimates . hd
            - data size estimation
            - soap vs rest api
        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b5dac93e7ae59a1af6b</links><ln>tiny URL estimates</ln>
        <links>https://github.com/systemdesign42/system-design?tab=readme-ov-file#system-design-fundamentals-1</links><ln>sysd42 backofenvelope</ln>
    </tetel>
    <tetel>
        <question>
            webcrawler
        </question>
        <answer>
            adsf
        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b72ac93e7ae59a1b059</links><ln>DG webcrawler </ln>
    </tetel>
    <tetel>
        <question>
            TinyUrl
        </question>
        <answer>
        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b5dac93e7ae59a1af6b</links><ln>DG tiny URL</ln>
    </tetel>
<!--    <tetel>-->
<!--        <question>-->
<!--            DropBox-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--        <images>http://ezittegybukfenc.de:8080/QA/dataPartition.jpg</images>-->
<!--    </tetel>-->
    <tetel>
        <question>
            Api Rate Limiter
        </question>
        <answer>
        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b70ac93e7ae59a1b025</links><ln>api rate limiter</ln>
    </tetel>

    <tetel>
        <question>
            Proxy, Reverse Proxy
        </question>
        <answer>

        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/645d5161fff33a24ccce4bb1</links><ln>proxy, reverse prox</ln>
    </tetel>

    <tetel>
        <question>
            LoadBalancing
                describe, types
        </question>
        <answer>
            distribute incoming load
            types : least connection, least response , least bandtwith, roundRobin, weightRR, ipHash
            - health checks
            - redundant load balancer - single point of failure
        </answer>
    </tetel>

    <tetel>
        <question>
            Caching : where can we cache - layer, place, invalidation policies, eviction policies
        </question>
        <answer>
            UC:
            where : request layer node cache in : mem, hd, both
            where : processor layers also cache pl. - we can have them in each layer
            what when expanded on multiple nodes ? - > each node with own cache, or global cache or distributed cache
            CDN : cache that serves loads static data

            CACHE INVALIDATION : when the data is no more valid (pl modified in the database)
                - write strats (through, around, back) cache
                - cache INVALIDATION METHODS : purge, refresh, ban, ttl, stale while revalidate
                - read strats (through, aside )

            CACHE EVICTION: LRU, MRU , FIFO , LIFO, LFU- least freq. used

            server side caching
            client side caching
        </answer>
        <images>http://ezittegybukfenc.de:8080/QA/caching.jpg</images>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/65a625996f7f6d0ab356273b</links><ln>dg serverside vs clientside cache</ln>
    </tetel>

    <tetel>
        <question>
           Partitioning
                types, pros, cons
        </question>
        <answer>
            Partitioning : process of dividing a large DB into smaller more manageable
                parts called partitions or shards.
            UC:
            Methods  - horizontal, vertical, hibrid
            Partitioning crit : key/hash based, list, RR, composite

            dirbased :
            common problems :
        </answer>
        <links>https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b7aac93e7ae59a1b0c1</links><ln>DG data partitioning</ln>
        <images>http://ezittegybukfenc.de:8080/QA/dataPartition.jpg</images>
    </tetel>
    <tetel>
        <question>
            Design a Chat Service (like Facebook Messenger or WhatsApp)

            Considerations for real-time messaging and data synchronization across devices.
            Handling high volumes of messages and maintaining low latency.
        </question>
        <answer>
        </answer>
    </tetel>

<!--    <tetel>-->
<!--        <question>-->
<!--            Design a Mass Social Media Service (like Facebook, Twitter, or Instagram)-->

<!--            Strategies for handling large-scale data and user traffic.-->
<!--            Implementing features like news feeds, post interactions, and multimedia content.-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--    </tetel>-->

<!--    <tetel>-->
<!--        <question>-->
<!--            Design a Social Network and Message Board Service (like Quora, Reddit, or HackerNews)-->

<!--            Focusing on user-generated content, community engagement, and content moderation.-->
<!--            Ensuring scalability and efficient search functionality across numerous posts and threads-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--    </tetel>-->

<!--    <tetel>-->
<!--        <question>-->
<!--            Design a File Sharing Service (like Dropbox, Google Drive, or Google Photos)-->

<!--            Ensuring secure file storage, sharing, and synchronization across multiple devices.-->
<!--            Handling large file sizes and optimizing for fast upload/download speeds.-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--    </tetel>-->

<!--    <tetel>-->
<!--        <question>-->
<!--            Design a Video Sharing Service (like YouTube, Netflix)-->

<!--            Managing large-scale video storage and optimizing streaming services for different devices.-->
<!--            Implementing user recommendations, content search, and playback quality adjustments.-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--    </tetel>-->

<!--    <tetel>-->
<!--        <question>-->
<!--            Design a Proximity Service (like Yelp, Nearby Friends, Uber)-->

<!--            Integrating location-based services and real-time updates.-->
<!--            Balancing privacy concerns with functionality for services reliant on user location.-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--    </tetel>-->

<!--    <tetel>-->
<!--        <question>-->
<!--            Design a Search Engine Related Service (like Typeahead or WebCrawler)-->

<!--            Developing fast, predictive search capabilities for enhanced user experience.-->
<!--            Designing efficient web crawling and data indexing strategies for accurate search results.-->
<!--        </question>-->
<!--        <answer>-->
<!--        </answer>-->
<!--    </tetel>-->

</questionlist>